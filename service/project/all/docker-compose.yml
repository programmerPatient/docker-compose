version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  golang1.18:                                # 自定义容器名称
    build:
      context: ../../base_server/golang/1.18                  # 指定构建使用的 Dockerfile 文件
    environment:                         # 设置环境变量
      - TZ=${TZ}
    privileged: true
    volumes:                             # 设置挂载目录
      - ${CODE_PATH_HOST}:/var/www  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启
  mysql:
    build:
      context: ../../base_server/mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis5.0:
    build:
      context: ../../base_server/redis/5.0
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis/5.0:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS50_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always
  redis-search:
    build:
      context: ../../base_server/redis-search
    environment:
      - TZ=${TZ}
    privileged: true
    command: redis-server --loadmodule /usr/lib/redis/modules/redisearch.so
    volumes:
      - ${DATA_PATH_HOST}/redis-search:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_SEARCH_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  #redis集群配置start
  redis-cluster-master:
    build:
      context: ../../base_server/redis-cluster/redis-master
    environment:
      - TZ=${TZ}
      # - REDIS_REPLICATION_MODE=master
      # - REDIS_PASSWORD=masterpassword123
      # - NODE_ID=1
      # - NODES=3
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis-cluster/redis-master:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_CLUSTER_MASTER}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always
  redis-cluster-slave1:
    build:
      context: ../../base_server/redis-cluster/redis-slave1
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis-cluster/redis-slave1:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    command:
      "redis-server --slaveof redis-cluster-master 6379"
    ports:
      - "${REDIS_CLUSTER_SLAVE1}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always
  redis-cluster-slave2:
    build:
      context: ../../base_server/redis-cluster/redis-slave2
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis-cluster/redis-slave2:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    command:
      "redis-server --slaveof redis-cluster-master 6379"
    ports:
      - "${REDIS_CLUSTER_SLAVE2}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always
  #redis集群配置end  

  mysql-manage:
    build:
      context: ../../base_server/mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}               # 设置连接的 Mysql 服务用户名称
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}           # 设置连接的 Mysql 服务用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD} # 设置连接的 Mysql 服务 root 用户密码
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}             # 设置连接的 Mysql 服务 host，可以是 Mysql 服务容器的名称，也可以是 Mysql 服务容器的 ip 地址
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}             # 设置连接的 Mysql 服务端口号
    ports:
      - "${MYSQL_MANAGE_PORT}:80"                         # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                           # 依赖容器
      - mysql                                             # 在 Mysql 服务容器启动后启动
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ../../base_server/redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}     # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80"                     # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - redis                                         # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always

  prometheus:
    build:
      context: ../../base_server/prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/prometheus/prometheus:/etc/prometheus
      - ${DATA_PATH_HOST}/prometheus/prometheus_data:/prometheus
      - ../../base_server/prometheus/nodes.json:/opt/prometheus/config/nodes/nodes.json
      - ../../base_server/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
      - ../../base_server/prometheus/group.yml:/opt/bitnami/prometheus/conf/group.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
  
  # 添加告警模块
  alertmanager:
    build:
      context: ../../base_server/alertmanager
    container_name: alertmanager
    ports:
      - "${ALERTMANAGER_PORT}:9093"
    volumes:
      - "../../base_server/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml"
      - ${DATA_PATH_HOST}/prometheus/data/alertmanager:/alertmanager/data
      - "../../base_server/alertmanager/templetes:/etc/alertmanager/templates"
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ../../base_server/grafana
    environment:
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/grafana/grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ../../base_server/jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  dtm:
    build:
      context: ../../base_server/dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ../../base_server/dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always
  
  mongo:
    build:
      context: ../../base_server/mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_MANAGE_USER_NAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_MANAGE_USER_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_MANAGE_DATABASE} # *.js 中默认的数据库
    ports:
      - ${MONGO_PORT}:27017
    networks:
      - backend
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${LOG_PATH_HOST}/mongo:/var/log/mongodb
      - ${CONFIG_PATH_HOST}/mongo:/etc/mongo
  elasticsearch:
    build:
      context: ../../base_server/elasticsearch
    ports:
      - "${ELASTICSEARCH_PORT1}:9200"
      - "${ELASTICSEARCH_PORT2}:9300"
    container_name: "elasticsearch"
    environment:
      # 单节点     
      - discovery.type=single-node
      - "- ES_JAVA_OPTS=-Xms2G -Xmx4G"
    volumes:
      - ${CONFIG_PATH_HOST}/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
      - ${CONFIG_PATH_HOST}/elasticsearch/plugins:/usr/share/elasticsearch/plugins
  kibana:
    build:
      context: ../../base_server/kibana
    ports:
      - "${KIBANA_PORT}:5601"
    container_name: "kibana"
    networks:
      - backend
    #restart: always
    depends_on:
      - elasticsearch
    volumes:
      - ${CONFIG_PATH_HOST}/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
  rabbitmq:
    #镜像  这个版本可以到docker-hub去获取自己想要的版本
    image: rabbitmq:3.9.13-management
    # 容器名
    container_name: rabbitmq
    # 是否支持重启
    restart: always
    hostname: rabbitmq
    ports:
      - 15672:15672
    # 容器卷
    volumes:
      - ${DATA_PATH_HOST}/data/rabbitmq/:/var/lib/rabbitmq
      - ${CONFIG_PATH_HOST}/rabbitmq/rabbitmq.sh:/etc/rabbitmq/rabbitmq.sh
    # 环境配置
    environment:
      - RABBITMQ_DEFAULT_USER=guest  # 账号
      - RABBITMQ_DEFAULT_PASS=guest  # 密码
      - RABBITMQ_ERLANG_COOKIE=hellocookie
    networks:
      - backend
  php7.4:
    build: 
      context: ../../base_server/php/7.4
      args:
        PHP_VERSION: php:${PHP74_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP74_EXTENSIONS}
        TZ: "$TZ"
    privileged: true #给用户root权限
    volumes:
      - ${CONFIG_PATH_HOST}/php/7.4/php.ini:/usr/local/etc/php/php.ini:ro
      - ${CONFIG_PATH_HOST}/php/7.4/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${LOG_PATH_HOST}/php/7.4:/var/log/php
      - ${DATA_PATH_HOST}/composer:/tmp/composer
      - ${CODE_PATH_HOST}:/var/www:rw                    # 设置挂载目录
    restart: always
    networks:
      - xdjy
  
  php8.0:
    build: 
      context: ../../base_server/php/8.0
      args:
        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
        TZ: "$TZ"
    privileged: true #给用户root权限
    volumes:
      - ${CONFIG_PATH_HOST}/php/8.0/php.ini:/usr/local/etc/php/php.ini:ro
      - ${CONFIG_PATH_HOST}/php/8.0/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${LOG_PATH_HOST}/php/8.0:/var/log/php
      - ${DATA_PATH_HOST}/composer:/tmp/composer
      - ${CODE_PATH_HOST}:/var/www:rw                    # 设置挂载目录
    restart: always
    networks:
      - xdjy